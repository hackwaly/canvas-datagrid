{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f6358877979484d10d0e","webpack:///canvas-datagrid.js","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","__webpack_require__","moduleId","installedModules","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","defaults","attributes","styles","context","component","Grid","args","isComponent","undefined","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","parentDOMNode","innerHTML","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","cachedImagesDrawn","draw","drawHtml","cell","img","v","formattedValue","cacheKey","toString","rowIndex","columnIndex","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","wrapText","splitChar","lines","value","calculatedLineHeight","word","elWidth","plWidth","clippedVal","previousLine","words","split","textHeight","wrap","cellWhiteSpace","et","ellipsisText","line","cHeight","paddedHeight","measureText","measure","paddedWidth","splice","originText","stepLength","direction","substr","drawText","fontHeight","lineHeight","vPos","hPos","paddingLeft","orderByArrowWidth","horizontalAlignment","paddingRight","verticalAlignment","paddingBottom","lineSpacing","offsetLeft","offsetTop","debug","active","font","debugFont","debugColor","stringify","pw","idx","idx_ord","sortColumnIndex","map","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","paddingTop","whiteSpace","cellLineHeight","cellLineSpacing","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","console","warn","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","gridBorderWidth","gridBorderColor","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","horizontalBoxVisible","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","verticalBoxVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","debugBackgroundColor","key","dpl","ph","px","py","debugPerfChartTextColor","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","apply","wheeling","stopPropagation","fn","events","removeEventListener","sfn","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","checkScrollBoxVisibility","dataWidth","overflowX","dataHeight","overflowY","setScrollBoxSize","setCanvasSize","dims","cellBorder","dim","appliedInlineStyles","parentNodeStyle","isComponet","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","ellipsisCache","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","sb","startingBounds","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","Number","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","colKey","substring","sel","cellData","colIndex","cName","getVisibleSchema","yi","getNextVisibleColumnIndex","visibleColumnIndex","getVisibleColumnIndexOf","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","headers","useHtml","hVal","join","addCellValue","trRow","textRow","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","sSorted","setData","touchMove","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","touchScrollTimeout","rw","t1","t2","changedTouches","getTouchPos","touchDeadZone","touchContextTimeout","touchZoomSensitivity","touchZoomMin","touchZoomMax","zoomAltered","selectionScrollZone","calculatePPS","touchScrollStart","stopAnimation","animationFrames","touchSelecting","startingCell","touchSelect","touchMoving","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchingCell","editCell","touchstart","disposeContextMenu","touchStartEvent","touchStart1","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","handleType","bounds","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","orderings","add","sortFunction","col","sort","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","applyFilter","refreshFromOrigialData","getHeaderByName","applyDataTransforms","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","message","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","getVisibleCellByIndex","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","isRowVisible","isColumnVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","contextMenuHoverBackground","contextMenuHoverColor","display","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","contextMenuItemMargin","contextMenuItemBorderRadius","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","contextMenuCursor","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","de","ri","st","dragObject","childGrid","trArgs","treeGridHeight","dontSetStorageData","sorter","xi","maxRowLength","minXi","lastSourceIndex","cidx","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f6358877979484d10d0e","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.parentDOMNode.innerHTML = \"\";\n            intf.parentDOMNode.appendChild(intf.canvas);\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target === intf && (mutation.addedNodes.length > 0 || mutation.type === 'characterData')) {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e, cell: self.currentCell})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var ev = {NativeEvent: e, column: column};\n                        if(self.dispatchEvent('copyonschema', ev)) {\n                            column = ev.column;\n                        }\n\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.orderings = {\n            columns: [],\n            add: function (orderBy, orderDirection, sortFunction) {\n                self.orderings.columns = self.orderings.columns.filter(function (col) {\n                    return col.orderBy !== orderBy;\n                });\n                self.orderings.columns.push({\n                    orderBy: orderBy,\n                    orderDirection: orderDirection,\n                    sortFunction: sortFunction\n                });\n            },\n            sort: function () {\n                self.orderings.columns.forEach(function (col) {\n                    self.data.sort(col.sortFunction(col.orderBy, col.orderDirection));\n                });\n            }\n        };\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.visibleCells = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.applyFilter = function () {\n            self.refreshFromOrigialData();\n            Object.keys(self.columnFilters).forEach(function (filter) {\n                var header = self.getHeaderByName(filter);\n                if (!header) {\n                    return;\n                }\n                self.currentFilter = header.filter || self.filter(header.type || 'string');\n                self.data = self.data.filter(function (row) {\n                    return self.currentFilter(row[filter], self.columnFilters[filter]);\n                });\n            });\n            self.resize();\n            self.draw(true);\n        };\n        self.applyDataTransforms = function () {\n            self.applyFilter();\n            self.orderings.sort();\n        }\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                // apply filter, sort, etc to incoming dataset\n                self.applyDataTransforms();\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    if (self.intf.createShadowRoot) {\n                        self.parentDOMNode.appendChild(self.canvas);\n                    }\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n            } else if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            self.applyDataTransforms();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            self.orderDirection = direction;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || c[0].sorter || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.orderings.add(columnName, direction, (typeof f === 'function' ? f : self.sorters.string));\n            self.orderings.sort();\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.parentDOMNode.innerHTML = \"\";\n            intf.parentDOMNode.appendChild(intf.canvas);\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target === intf && (mutation.addedNodes.length > 0 || mutation.type === 'characterData')) {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e, cell: self.currentCell})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var ev = {NativeEvent: e, column: column};\n                        if(self.dispatchEvent('copyonschema', ev)) {\n                            column = ev.column;\n                        }\n\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.orderings = {\n            columns: [],\n            add: function (orderBy, orderDirection, sortFunction) {\n                self.orderings.columns = self.orderings.columns.filter(function (col) {\n                    return col.orderBy !== orderBy;\n                });\n                self.orderings.columns.push({\n                    orderBy: orderBy,\n                    orderDirection: orderDirection,\n                    sortFunction: sortFunction\n                });\n            },\n            sort: function () {\n                self.orderings.columns.forEach(function (col) {\n                    self.data.sort(col.sortFunction(col.orderBy, col.orderDirection));\n                });\n            }\n        };\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.visibleCells = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.applyFilter = function () {\n            self.refreshFromOrigialData();\n            Object.keys(self.columnFilters).forEach(function (filter) {\n                var header = self.getHeaderByName(filter);\n                if (!header) {\n                    return;\n                }\n                self.currentFilter = header.filter || self.filter(header.type || 'string');\n                self.data = self.data.filter(function (row) {\n                    return self.currentFilter(row[filter], self.columnFilters[filter]);\n                });\n            });\n            self.resize();\n            self.draw(true);\n        };\n        self.applyDataTransforms = function () {\n            self.applyFilter();\n            self.orderings.sort();\n        }\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                // apply filter, sort, etc to incoming dataset\n                self.applyDataTransforms();\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    if (self.intf.createShadowRoot) {\n                        self.parentDOMNode.appendChild(self.canvas);\n                    }\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n            } else if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            self.applyDataTransforms();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            self.orderDirection = direction;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || c[0].sorter || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.orderings.add(columnName, direction, (typeof f === 'function' ? f : self.sorters.string));\n            self.orderings.sort();\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}